Going to attempt to modularize this. I find it nearly impossible to keep up 
with the tens of thousands of lines of code in a single js file. Seeing as 
this code isn't being pushed over the web --it's an addon in one form or 
another-- it shouldn't hurt performance at all to split this up into more 
manageable files.

Lol. So it seems that javascript is such a broken language that it doesn't 
even have a concept of requiring external files outside of manual 
dependency management hell in the actual html document. Unless of course 
you're prepared to rely on jquery or node or requirejs or any of a 
number of technologies that have all been built to work around this terrible 
excuse for a language. Including compile-to-js. Seriously: If you find 
yourself having to write your app in a different language, and THEN WRITE 
AN ENTIRE FUCKING COMPILER TO PORT IT TO javascript, then something has 
gone seriously, seriously wrong.

But it's looking like manual dependency mangement is my best bet if I 
don't want to include something like jquery or node. What a fucking mess.

Honestly, it seems that there are so many interdependencies across 
different segments of the script that jquery or node might be the best 
bet. I'm still looking into other ways to organize all of it.

UPDATE: Well, I don't see an easy way of using something like requireJS 
(which I liked the most) with greasemonkey. But slinging our own modular 
implementation with closures would involve a pretty massive rewrite from 
what I can tell.

UPDATE: Hahahaha... shoot me. So it looks like modularity just isn't meant 
to be with userscripts. You can utilize the @require directive, but it seems 
that anything "required" in this manner is not updated; once its loaded 
once, it's done. No more updates. Gonna see if this is truly the case.

Edit: https://groups.google.com/forum/#!topic/greasemonkey-users/VeXg80oO7wY

HAHAHA NOPE.

I honestly don't know how @YePpHa stays on top of this and debugs it and 
tests it. Sounds rough unless you were developing it from the gitgo.
